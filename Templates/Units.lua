---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MSI.
--- DateTime: 14.07.2022 22:51
---
do

    UnitsData       = 0
    UnitsList       = 0


    ---@param source unit function
    function GetUnitData(source)
        return UnitsList[GetHandleId(source)]
    end

    ---@param effect string
    ---@param unit unit
    ---@return boolean
    function UnitHasEffect(unit, effect)
        local unit_data = GetUnitData(unit)
        return unit_data.effects[effect]
    end

    ---@param effect string
    ---@param unit unit
    function UnitAddEffect(unit, effect)
        local unit_data = GetUnitData(unit)

            if unit_data.effects[effect] then unit_data.effects[effect] = unit_data.effects[effect] + 1
            else unit_data.effects[effect] = 1 end

            OnUnitEffectApply(unit, effect)

    end

    ---@param effect string
    ---@param unit unit
    function UnitRemoveEffect(unit, effect)
        local unit_data = GetUnitData(unit)

            if unit_data.effects[effect] then
                unit_data.effects[effect] = unit_data.effects[effect] - 1
                if unit_data.effects[effect] <= 0 then
                    unit_data.effects[effect] = nil
                    OnUnitEffectEnd(unit, effect)
                end
            end

    end



    ---@param source unit
    ---@param reference_data table
    function NewUnitByTemplate(source, reference_data)
        local data  = MergeTables({}, reference_data)



        return data
    end


    function NewUnitTemplate(id, reference)
        local new_data = { }

            MergeTables(new_data, reference)

        UnitsData[FourCC(id)] = new_data
    end




    function InitUnitsDataOnMap()
        local group = CreateGroup()

            GroupEnumUnitsInRect(group, bj_mapInitialPlayableArea, nil)

                ForGroup(group, function ()
                    local handle = GetUnitTypeId(GetEnumUnit())

                        if UnitsData[handle] then
                            NewUnitByTemplate(GetEnumUnit(), UnitsData[handle])
                            if UnitsData[handle].name then BlzSetUnitName(GetEnumUnit(), UnitsData[handle].name) end
                            OnUnitCreated(GetEnumUnit())
                        end

                        if GetUnitTypeId(GetEnumUnit()) == FourCC("n00N") then
                            OnUnitCreated(GetEnumUnit())
                        end

                end)

        DestroyGroup(group)
    end






    function UnitDataInit()

        UnitsData       = { }
        UnitsList       = { }


        NewUnitTemplate("trmr", {
            name = GetLocalString("Морпех", "Marine"),
            weapon = {
                damage = 5,
                damage_type = DAMAGE_TYPE_STANDARD,
                fire_sound = { pack = { "Sound\\Marine\\tmafir00.wav" }, volume = 115, cutoff = 1700. }
            },
            death_sound = { pack = { "Sound\\Marine\\tmadth00.wav", "Sound\\Marine\\tmadth01.wav" }, volume = 115, cutoff = 1700. }
        })




        local trg = CreateTrigger()
        TriggerRegisterEnterRectSimple(trg, bj_mapInitialPlayableArea)
        TriggerAddAction(trg, function ()

            local unit = GetTriggerUnit()

                if UnitsList[GetHandleId(unit)] == nil and UnitsData[GetUnitTypeId(unit)] then
                    NewUnitByTemplate(unit, UnitsData[GetUnitTypeId(unit)])
                    if UnitsData[GetUnitTypeId(unit)].name then BlzSetUnitName(unit, UnitsData[GetUnitTypeId(unit)].name) end
                    OnUnitCreated(unit)
                end

        end)

        trg = CreateTrigger()
        TriggerRegisterAnyUnitEventBJ(trg, EVENT_PLAYER_UNIT_DEATH)
        TriggerAddAction(trg, function ()
            local unit_data = GetUnitData(GetTriggerUnit())

                if unit_data then
                    --TimerStart(unit_data.action_timer, 0., false, nil)
                    --TimerStart(unit_data.attack_timer, 0., false, nil)

                    if unit_data.death_sound then
                        AddSoundVolume(unit_data.death_sound.pack[GetRandomInt(1, #unit_data.death_sound.pack)], GetUnitX(unit_data.Owner), GetUnitY(unit_data.Owner), unit_data.death_sound.volume, unit_data.death_sound.cutoff)
                    end

                    if unit_data.hide_body then
                        DelayAction(unit_data.base_stats.death_time, function() ShowUnit(unit_data.Owner) end)
                    end

                    if unit_data.time_before_remove > 0. then
                        local handle = GetHandleId(unit_data.Owner)

                            local timer = CreateTimer()
                            TimerStart(timer, unit_data.time_before_remove, false, function()
                                --DestroyTimer(unit_data.action_timer)
                                --DestroyTimer(unit_data.attack_timer)
                                UnitsList[handle] = nil
                                DestroyTimer(timer)
                            end)

                    end

                end

                OnUnitDeath(GetTriggerUnit(), GetKillingUnit())

        end)


    end

end