---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by MSI.
--- DateTime: 17.07.2022 23:12
---
do


    StimSoundBuffer = 0

    function StimpackEffect(source, silent)

            if GetUnitState(source, UNIT_STATE_LIFE) > 10 then

                SetUnitState(source, UNIT_STATE_LIFE, GetUnitState(source, UNIT_STATE_LIFE) - 10)

                    if not silent then
                        if StimSoundBuffer < 5 then
                            AddSoundVolume("Sound\\Ability\\tmasti0".. GetRandomInt(0,1)..".wav", GetUnitX(source), GetUnitY(source), 100, 1900., 4000.)
                            StimSoundBuffer = StimSoundBuffer + 1
                            DelayAction(0., function() StimSoundBuffer = 0 end)
                        end
                    end


                ApplyTimedEffect(source, "A006", 9.24)

            end

    end

    function StimpackEffect_Bunker(source)
        local duration = 9.24
        local timer
        local attack_cd = BlzGetUnitAttackCooldown(source, 0)

            if GetUnitState(source, UNIT_STATE_LIFE) > 10 then

                SetUnitState(source, UNIT_STATE_LIFE, GetUnitState(source, UNIT_STATE_LIFE) - 10)

                if GetUnitUserData(source) > 0 then
                    SetUnitUserData(source, math.floor(duration * 1000))
                else
                    timer = CreateTimer()
                    BlzSetUnitAttackCooldown(source, attack_cd * 0.64, 0)
                    SetUnitUserData(source, math.floor(duration * 1000))

                    TimerStart(timer, 0.1, true, function()
                        if source then
                            duration = GetUnitUserData(source) / 1000.
                                if duration <= 0. then
                                    BlzSetUnitAttackCooldown(source, attack_cd, 0)
                                    DestroyTimer(timer)
                                else
                                    duration = duration - 0.1
                                    SetUnitUserData(source, math.floor(duration * 1000))
                                end
                        else
                            DestroyTimer(timer)
                        end
                    end)
                end

            end

    end

    function OpticalFlareEffect(target)
        local unit_data = GetUnitData(target)

            AddSoundVolume("Sound\\Ability\\Miopia1.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)
            SetDetectionState(target, false)

            unit_data.sight = BlzGetUnitRealField(target, UNIT_RF_SIGHT_RADIUS)
            BlzSetUnitRealField(target, UNIT_RF_SIGHT_RADIUS, 325)
            UnitAddAbility(target, FourCC("A007"))
    end


    function RestorationEffect(target)
        local unit_data = GetUnitData(target)

            AddSoundVolume("Sound\\Ability\\TMedRest.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)
            SetDetectionState(target, true)

            if GetUnitAbilityLevel(target, FourCC("A007")) > 0 then
                BlzSetUnitRealField(target, UNIT_RF_SIGHT_RADIUS, unit_data.sight)
                UnitRemoveAbility(target, FourCC("A007"))
            end

            UnitRemoveAbility(target, FourCC("A00E"))
            UnitRemoveAbility(target, FourCC("A00N"))

    end


    function RegisterGhostCloak(target)
        local order_trigger = CreateTrigger()
        local death_trigger = CreateTrigger()
        local regen = BlzGetUnitRealField(target, UNIT_RF_MANA_REGENERATION)
        local timer = CreateTimer()

            TriggerRegisterUnitEvent(order_trigger, target, EVENT_UNIT_ISSUED_ORDER)
            TriggerAddAction(order_trigger, function()
                if GetIssuedOrderId() == order_immolation then
                    UnitAddAbility(target, FourCC("A00B"))
                    BlzSetUnitRealField(target, UNIT_RF_MANA_REGENERATION, -0.93)
                    if GetUnitAbilityLevel(target, FourCC("A00P")) > 0 then SetCloakState(target, false) end
                    TimerStart(timer, 0.75, true, function()

                        if GetUnitState(target, UNIT_STATE_MANA) <= 0.5 then
                            IssueImmediateOrderById(target, order_unimmolation)
                        end

                    end)

                    DelayAction(0., function()
                        if GetUnitCurrentOrder(target) == 0 then SetUnitAnimationByIndex(target, 8) end
                        DelayAction(2., function() if GetUnitCurrentOrder(target) == 0 and GetUnitState(target, UNIT_STATE_LIFE) > 0.045 then SetUnitAnimation(target, "stand") end end)
                    end)
                elseif GetIssuedOrderId() == order_unimmolation then
                    UnitRemoveAbility(target, FourCC("A00B"))
                    TimerStart(timer, 0., false, nil)
                    BlzSetUnitRealField(target, UNIT_RF_MANA_REGENERATION, regen)
                    DelayAction(0., function() if GetUnitCurrentOrder(target) == 0 then SetUnitAnimationByIndex(target, 9) end end)
                end
            end)

            TriggerRegisterUnitEvent(death_trigger, target, EVENT_UNIT_DEATH)
            TriggerAddAction(death_trigger, function()
                DestroyTrigger(order_trigger)
                DestroyTrigger(death_trigger)
                DestroyTimer(timer)
            end)

    end




    function LockdownEffect(target)
        local effect = AddSpecialEffectTarget("Ability\\ghost lockdown target.mdx", target, "chest")

            IssueImmediateOrderById(target, order_unimmolation)
            --SetUnitTimeScale(target, 0.)
            PauseUnitAction(target)
            SafePauseUnit(target, true)
            SetDetectionState(target, false)
            AddSoundVolume("Sound\\Abilities\\tghlkd00.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)
            ApplyTimedEffect(target, "A00E", 44.1, function()
                --SetUnitTimeScale(target, 1.)
                ResumeUnitAction(target)
                DestroyEffect(target, effect)
                SafePauseUnit(target, false)
                SetDetectionState(target, true)
            end)

    end

    
    function RegisterSiegeModeEffect(target)
        local order_trigger = CreateTrigger()
        local death_trigger = CreateTrigger()

            TriggerRegisterUnitEvent(order_trigger, target, EVENT_UNIT_ISSUED_ORDER)
            TriggerAddAction(order_trigger, function()
                if GetIssuedOrderId() == order_bearform then
                    UnitAddType(target, UNIT_TYPE_SAPPER)
                    SetUnitFacing(target, 320.)
                    AddSoundVolume("Sound\\Ability\\ttatra00.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)
                    QueueUnitAction(target, 2.35, function()
                        AddSoundVolume("Sound\\Ability\\ttatra01.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)
                    end)
                elseif GetIssuedOrderId() == order_unbearform then
                    AddSoundVolume("Sound\\Ability\\ttatra01.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)
                    QueueUnitAction(target, 1.7, function()
                        AddSoundVolume("Sound\\Ability\\ttatra00.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)
                        UnitRemoveType(target, UNIT_TYPE_SAPPER)
                    end)
                end
            end)

            TriggerRegisterUnitEvent(death_trigger, target, EVENT_UNIT_DEATH)
            TriggerAddAction(death_trigger, function()
                DestroyTrigger(order_trigger)
                DestroyTrigger(death_trigger)
                --DestroyTimer(timer)
            end)

    end

    function SpiderMineDamage(mine)
        local group = CreateGroup()
        local player = GetOwningPlayer(mine)
        local unit_data = GetUnitData(mine)

            GroupEnumUnitsInRange(group, GetUnitX(mine), GetUnitY(mine), 234.375, nil)

                for index = BlzGroupGetSize(group) - 1, 0, -1 do
                    local picked = BlzGroupUnitAt(group, index)

                        if GetUnitState(picked, UNIT_STATE_LIFE) > 0.045 and IsUnitEnemy(picked, player) and (IsUnitType(picked, UNIT_TYPE_GROUND) and not IsUnitType(picked, UNIT_TYPE_STRUCTURE)) then
                            if IsUnitInRange(mine, picked, 117.15) then
                                DamageUnit(mine, picked, unit_data.weapon[1].damage, unit_data.weapon[1].damage_type)
                            elseif IsUnitInRange(mine, picked, 175.725) then
                                DamageUnit(mine, picked, unit_data.weapon[1].damage / 2., unit_data.weapon[1].damage_type)
                            else
                                DamageUnit(mine, picked, unit_data.weapon[1].damage / 4, unit_data.weapon[1].damage_type)
                            end
                        end
                end

            KillUnit(mine)
            DestroyGroup(group)
    end

    function SpiderMineTrigger(mine)
        local death_trigger = CreateTrigger()
        local attack_trigger = CreateTrigger()
        local timer = CreateTimer()
        local target_validation_trigger = CreateTrigger()
        local break_chase = false
        local order_interception = CreateTrigger()
        local target = nil


            TriggerAddAction(target_validation_trigger, function()
                break_chase = true
            end)

            TriggerRegisterUnitEvent(order_interception, mine, EVENT_UNIT_ISSUED_ORDER)
            TriggerRegisterUnitEvent(order_interception, mine, EVENT_UNIT_ISSUED_POINT_ORDER)
            TriggerRegisterUnitEvent(order_interception, mine, EVENT_UNIT_ISSUED_TARGET_ORDER)
            TriggerAddAction(order_interception, function()
                local order = GetIssuedOrderId()

                    if (order == order_smart or order == order_attack) and target then
                        if GetUnitState(target, UNIT_STATE_LIFE) > 0.045 and IsUnitVisible(target, GetOwningPlayer(mine)) and not break_chase then
                            IssueTargetOrderById(mine, order_attack, target)
                        else
                            IssueImmediateOrderById(mine, order_stop)
                            target = nil
                        end
                    elseif order ~= order_burrow and order ~= order_unburrow then
                        IssueImmediateOrderById(mine, order_stop)
                        target = nil
                    end

            end)


            TriggerRegisterUnitEvent(attack_trigger, mine, EVENT_UNIT_ACQUIRED_TARGET)
            --TriggerRegisterAnyUnitEventBJ(attack_trigger, EVENT_PLAYER_UNIT_ATTACKED)
            TriggerAddAction(attack_trigger, function()
                if GetUnitTypeId(mine) == FourCC("trs2") and ConvertMoveType(BlzGetUnitIntegerField(GetEventTargetUnit(), UNIT_IF_MOVE_TYPE)) ~= MOVE_TYPE_FLOAT then
                    target = GetEventTargetUnit()
                    IssueImmediateOrderById(mine, order_unburrow)
                    QueueUnitAction(mine, 0.666, function()
                        AddSoundVolume("Sound\\Ability\\tvumin01.wav", GetUnitX(mine), GetUnitY(mine), 100, 1900., 4000.)
                        if GetUnitState(target, UNIT_STATE_LIFE) > 0.045 then
                            break_chase = false
                            AddSoundVolume("Sound\\Ability\\tvumin00.wav", GetUnitX(mine), GetUnitY(mine), 100, 1900., 4000.)
                            DisableTrigger(order_interception)
                            IssueTargetOrderById(mine, order_attack, target)
                            EnableTrigger(order_interception)
                            TriggerRegisterUnitEvent(target_validation_trigger, target, EVENT_UNIT_LOADED)
                            TimerStart(timer, 0.1, true, function()
                                if GetUnitState(mine, UNIT_STATE_LIFE) < 0.045 or GetUnitState(target, UNIT_STATE_LIFE) < 0.045 or not IsUnitVisible(target, GetOwningPlayer(mine)) or break_chase then
                                    IssueImmediateOrderById(mine, order_burrow)
                                    target = nil
                                    QueueUnitAction(mine, 0.666, function() AddSoundVolume("Sound\\Ability\\tvumin01.wav", GetUnitX(mine), GetUnitY(mine), 100, 1900., 4000.) end)
                                end
                            end)
                        elseif GetIssuedOrderId() == 0 then
                            IssueImmediateOrderById(mine, order_burrow)
                            QueueUnitAction(mine, 0.666, function() AddSoundVolume("Sound\\Ability\\tvumin01.wav", GetUnitX(mine), GetUnitY(mine), 100, 1900., 4000.) end)
                            target = nil
                        end
                    end)
                end
            end)

            TriggerRegisterUnitEvent(death_trigger, mine, EVENT_UNIT_DEATH)
            TriggerAddAction(death_trigger, function()
                DestroyTrigger(attack_trigger)
                DestroyTrigger(death_trigger)
                DestroyTrigger(order_interception)
                DestroyTrigger(target_validation_trigger)
            end)
    end


    function SpiderMineDeploy(caster, point_x, point_y)
        local unit_data = GetUnitData(caster)


            if unit_data.spider_mine_charges then
                unit_data.spider_mine_charges = unit_data.spider_mine_charges - 1
                if unit_data.spider_mine_charges <= 0 then UnitRemoveAbility(caster, FourCC("A00I")) end
            else
                unit_data.spider_mine_charges = 2
            end


            local mine = CreateUnit(GetOwningPlayer(caster), FourCC("trs1"), point_x, point_y, GetRandomReal(0., 359.))

            SafePauseUnit(mine, true)
            DelayAction(2., function()
                if GetUnitState(mine, UNIT_STATE_LIFE) > 0.045 and not IsUnitDisabled(mine) then
                    SafePauseUnit(mine, false)
                    IssueImmediateOrderById(mine, order_burrow)
                    QueueUnitAction(mine, 0.666, function()
                        AddSoundVolume("Sound\\Ability\\tvumin01.wav", GetUnitX(mine), GetUnitY(mine), 100, 1900., 4000.)
                        UnitRemoveAbility(mine, FourCC("Abun"))
                        SpiderMineTrigger(mine)
                    end)
                end

            end)
    end


    function RegisterWraithCloak(target)
        local order_trigger = CreateTrigger()
        local death_trigger = CreateTrigger()
        local regen = BlzGetUnitRealField(target, UNIT_RF_MANA_REGENERATION)
        local timer = CreateTimer()

            TriggerRegisterUnitEvent(order_trigger, target, EVENT_UNIT_ISSUED_ORDER)
            TriggerAddAction(order_trigger, function()
                if GetIssuedOrderId() == order_immolation then

                    UnitAddAbility(target, FourCC("A00B"))
                    BlzSetUnitRealField(target, UNIT_RF_MANA_REGENERATION, -0.186)
                    if GetUnitAbilityLevel(target, FourCC("A00P")) > 0 then SetCloakState(target, false) end

                    TimerStart(timer, 0.75, true, function()

                        if GetUnitState(target, UNIT_STATE_MANA) <= 0.5 then
                            IssueImmediateOrderById(target, order_unimmolation)
                        end

                    end)

                    DelayAction(0., function()
                        if GetUnitCurrentOrder(target) == 0 then SetUnitAnimationByIndex(target, 8) end
                        DelayAction(2., function() if GetUnitCurrentOrder(target) == 0 and GetUnitState(target, UNIT_STATE_LIFE) > 0.045 then SetUnitAnimation(target, "stand") end end)
                    end)
                elseif GetIssuedOrderId() == order_unimmolation then
                    UnitRemoveAbility(target, FourCC("A00B"))
                    TimerStart(timer, 0., false, nil)
                    BlzSetUnitRealField(target, UNIT_RF_MANA_REGENERATION, regen)
                    DelayAction(0., function() if GetUnitCurrentOrder(target) == 0 then SetUnitAnimationByIndex(target, 9) end end)
                end
            end)

            TriggerRegisterUnitEvent(death_trigger, target, EVENT_UNIT_DEATH)
            TriggerAddAction(death_trigger, function()
                DestroyTrigger(order_trigger)
                DestroyTrigger(death_trigger)
                DestroyTimer(timer)
            end)

            --TriggerRegisterUnitEvent(trg, yn, EVENT_UNIT_)

    end



    function UnloadCommand(caster, target, x, y)


        if target and target == caster then
            if not IsTerrainPathable(x, y, PATHING_TYPE_WALKABILITY) then
                local timer = CreateTimer()
                TimerStart(timer, 1., true, function()
                    if GetUnitState(caster, UNIT_STATE_LIFE) > 0.045 and not IsUnitDisabled(caster) then
                        local attempt = IssuePointOrderById(caster, order_unload, GetUnitX(caster), GetUnitY(caster))
                        if not attempt then DestroyTimer(timer) end
                    else
                        DestroyTimer(timer)
                    end
                end)

            end

        else

        end

    end


    function IrradiateEffect(caster, target)
        local irradiate_id = FourCC("A00N")

            AddSoundVolume("Sound\\Ability\\tveirr00.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)

            if GetUnitAbilityLevel(target, irradiate_id) == 0 then
                local group = CreateGroup()
                local timer = CreateTimer()
                local duration = 25.2

                    UnitAddAbility(target, irradiate_id)

                    TimerStart(timer, 0.33, true, function()

                        if GetUnitState(target, UNIT_STATE_LIFE) <= 0.045 or duration <= 0. or GetUnitAbilityLevel(target, irradiate_id) == 0 then
                            DestroyTimer(timer)
                            DestroyGroup(group)
                            UnitRemoveAbility(target, irradiate_id)
                        else
                            GroupEnumUnitsInRange(group, GetUnitX(target), GetUnitY(target), 150., nil)

                            for index = BlzGroupGetSize(group) - 1, 0, -1 do
                                local picked = BlzGroupUnitAt(group, index)

                                if GetUnitState(picked, UNIT_STATE_LIFE) > 0.045 and not IsUnitType(picked, UNIT_TYPE_MECHANICAL) then
                                    UnitDamageTarget(caster, picked, 3.33, false, false, ATTACK_TYPE_NORMAL, nil, WEAPON_TYPE_WHOKNOWS)
                                end
                            end

                            GroupClear(group)
                            duration = duration - 0.33
                        end

                    end)

            end



    end


    function DefensiveMatrixEffect(target)
        local unit_data = GetUnitData(target)
        local timer

            AddSoundVolume("Sound\\Ability\\tvedef00.wav", GetUnitX(target), GetUnitY(target), 100, 1900., 4000.)
            SetCloakState(target, false)

            if GetUnitAbilityLevel(target, FourCC("A00P")) == 0 then
                timer = CreateTimer()
                unit_data.matrix_absorb_amount = 250
                unit_data.matrix_timer = timer
                UnitAddAbility(target, FourCC("A00P"))

                    TimerStart(timer, 56.7, false, function()

                        if unit_data then
                            unit_data.matrix_absorb_amount = 0
                            unit_data.matrix_timer = nil
                        end

                        DestroyTimer(timer)
                        if GetUnitState(target, UNIT_STATE_LIFE) > 0.045 then
                            UnitRemoveAbility(target, FourCC("A00P"))
                            SetCloakState(target, true)
                        end
                    end)
            else
                timer = unit_data.matrix_timer
                unit_data.matrix_absorb_amount = 250
                TimerStart(unit_data.matrix_timer, 56.7, false, function()

                    DestroyTimer(timer)

                    if unit_data then
                        unit_data.matrix_absorb_amount = 0
                        unit_data.matrix_timer = nil
                    end

                    if GetUnitState(target, UNIT_STATE_LIFE) > 0.045 then
                        UnitRemoveAbility(target, FourCC("A00P"))
                        SetCloakState(target, true)
                    end

                end)
            end

    end


    function EMPEffect(x, y)
        local group = CreateGroup()

            AddSoundVolume("Sound\\Ability\\tveemp00.wav", x, y, 100, 1900., 4000.)

            GroupEnumUnitsInRange(group, x, y, 225., nil)

            for index = BlzGroupGetSize(group) - 1, 0, -1 do
                local picked = BlzGroupUnitAt(group, index)

                if not BlzIsUnitInvulnerable(picked) then SetUnitState(picked, UNIT_STATE_MANA, 0) end

            end

        DestroyGroup(group)
    end


    function YamatoChargeEffect(caster, target)
        local timer = CreateTimer()
        local charge_duration = 2.2


            IssueImmediateOrderById(caster, order_stop)
            SetUnitAnimationByIndex(caster, 2)
            SafePauseUnit(caster, true)
            AddSoundVolume("Sound\\Ability\\tbayam01.wav", GetUnitX(caster), GetUnitY(caster), 100, 1900., 4000.)

            TimerStart(timer, 0.025, true, function()
                if GetUnitState(caster, UNIT_STATE_LIFE) < 0.045 or IsUnitDisabled(caster) or not IsUnitInRange(caster, target, 1000.) then
                    SetUnitState(caster, UNIT_STATE_MANA, GetUnitState(caster, UNIT_STATE_MANA) + 150.)
                    DestroyTimer(timer)
                    SafePauseUnit(caster, false)
                elseif charge_duration <= 0. then
                    DestroyTimer(timer)
                    SafePauseUnit(caster, false)
                    AddSoundVolume("Sound\\Ability\\tbayam02.wav", GetUnitX(caster), GetUnitY(caster), 100, 1900., 4000.)
                    ThrowMissile(caster, target, "yamato_missile", nil, GetUnitX(caster), GetUnitY(caster), 0., 0., 0., true)
                else
                    charge_duration = charge_duration - 0.025
                    SetUnitFacing(caster, AngleBetweenUnits(caster, target))
                end
            end)
    end


    function ValkyrieBarrageDamage(caster, x, y)
        local group = CreateGroup()
        local unit_data = GetUnitData(caster)
        local full_damage = false

            AddSoundVolume("Sound\\Valkyrie\\Tfrhit.wav", x, y, 100, 1900., 4000.)
            GroupEnumUnitsInRange(group, x, y, 225., nil)

                for index = BlzGroupGetSize(group) - 1, 0, -1 do
                    local picked = BlzGroupUnitAt(group, index)

                    if not BlzIsUnitInvulnerable(picked) and GetUnitState(picked, UNIT_STATE_LIFE) > 0.045 and ConvertMoveType(BlzGetUnitIntegerField(picked, UNIT_IF_MOVE_TYPE)) == MOVE_TYPE_FLY then

                        if not full_damage then
                            DamageUnit(caster, picked, unit_data.weapon[1].damage, unit_data.weapon[1].damage_type)
                            full_damage = true
                        else
                            if IsUnitInRangeXY(picked, x, y, 150.) then
                                DamageUnit(caster, picked, unit_data.weapon[1].damage / 2., unit_data.weapon[1].damage_type)
                            else
                                DamageUnit(caster, picked, unit_data.weapon[1].damage / 4., unit_data.weapon[1].damage_type)
                            end
                        end

                    end

                end

        DestroyGroup(group)
    end


    function GetValkPointOffset(caster)
        local unit_data = GetUnitData(caster)

            if unit_data.valk_barrage_point then
                if unit_data.valk_barrage_point == 1 then
                    unit_data.valk_barrage_point = unit_data.valk_barrage_point + 1
                    return 0., 0.
                elseif unit_data.valk_barrage_point >= 2 and unit_data.valk_barrage_point <= 5 then
                    local angle = GetRandomReal(0., 359.)
                    local offset = GetRandomReal(35., 47.)
                        unit_data.valk_barrage_point = unit_data.valk_barrage_point + 1
                    return Rx(offset, angle), Ry(offset, angle)
                elseif unit_data.valk_barrage_point > 5 then
                    local angle = GetRandomReal(0., 359.)
                    local offset = GetRandomReal(117., 141.)
                        unit_data.valk_barrage_point = unit_data.valk_barrage_point + 1
                        if unit_data.valk_barrage_point > 14 then unit_data.valk_barrage_point = 1 end
                    return Rx(offset, angle), Ry(offset, angle)
                end
            else
                unit_data.valk_barrage_point = 2
                return 0., 0.
            end

    end


    function ValkyrieBarrageEffect(caster, target)
        local timer = CreateTimer()
        local barrage = 3
        local angle = AngleBetweenUnits(caster, target)
        local missile


            SafePauseUnit(caster, true)
            AddSoundVolume("Sound\\Valkyrie\\shoot2.wav", GetUnitX(caster), GetUnitY(caster), 100, 1900., 4000.)

            missile = ThrowMissile(caster, target, "valkyrie_missile", nil, GetUnitX(caster) + Rx(50., angle - 15.), GetUnitY(caster) + Ry(50., angle - 15.), 0., 0., 0.)
            missile.offset_track_x, missile.offset_track_y = GetValkPointOffset(caster)
            missile = ThrowMissile(caster, target, "valkyrie_missile", nil, GetUnitX(caster) + Rx(50., angle + 15.), GetUnitY(caster) + Ry(50., angle + 15.), 0., 0., 0.)
            missile.offset_track_x, missile.offset_track_y = GetValkPointOffset(caster)


            TimerStart(timer, 0.33, true, function()
                if GetUnitState(caster, UNIT_STATE_LIFE) < 0.045 or IsUnitDisabled(caster) then
                    DestroyTimer(timer)
                elseif barrage <= 0 then
                    DestroyTimer(timer)
                    SafePauseUnit(caster, false)
                else
                    angle = AngleBetweenUnits(caster, target)
                    AddSoundVolume("Sound\\Valkyrie\\shoot2.wav", GetUnitX(caster), GetUnitY(caster), 100, 1900., 4000.)

                    missile = ThrowMissile(caster, target, "valkyrie_missile", nil, GetUnitX(caster) + Rx(50., angle - 15.), GetUnitY(caster) + Ry(50., angle - 15.), 0., 0., 0.)
                    missile.offset_track_x, missile.offset_track_y = GetValkPointOffset(caster)
                    missile = ThrowMissile(caster, target, "valkyrie_missile", nil, GetUnitX(caster) + Rx(50., angle + 15.), GetUnitY(caster) + Ry(50., angle + 15.), 0., 0., 0.)
                    missile.offset_track_x, missile.offset_track_y = GetValkPointOffset(caster)

                    SetUnitFacing(caster, AngleBetweenUnits(caster, target))
                    barrage = barrage - 1
                end
            end)

    end

end